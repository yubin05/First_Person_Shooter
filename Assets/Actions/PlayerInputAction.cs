//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Actions/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""BattleField_Player"",
            ""id"": ""c339bc4b-2f85-46fb-bc98-37a9d8a6bf71"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d76ecd0f-6ad1-4ad8-b4a1-3615a756aae2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""579cbb65-290d-499a-a993-b09f851d106b"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c8a7e549-c7d0-40fc-a097-ddb0b1313fd7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e3c13060-1494-4c51-989c-ec911860bfd1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e5313fe5-5f09-4680-ad77-94a5619e6966"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8f48bc62-bc63-462f-8f69-3a8217ba58b7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7b616574-f21e-4f82-a07f-ef0f5cdbe4c4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""71304ba6-960b-4848-b245-ccc42589ce5b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BattleField_Gun"",
            ""id"": ""857105cb-f5a3-4d00-a4a3-2f0efd5cc71d"",
            ""actions"": [
                {
                    ""name"": ""Shot"",
                    ""type"": ""Button"",
                    ""id"": ""50d61d6a-427c-4904-b73a-8e3c03e5e09f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Button"",
                    ""id"": ""68dcba47-e854-44da-8a9b-560d71dcf3fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b546894d-3a77-42fa-b84d-df2db6eb44c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5fd4cc7a-a9e7-4ec7-a948-87ef774d3950"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31517843-58d5-4c1a-ba7f-2599a2ee1181"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44f4afe1-c3c3-4306-900e-16330adeb34d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BattleField_Setting"",
            ""id"": ""f1acb8bb-a49a-49e3-8f0a-5979073efd3e"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6328e0e5-8e3f-46dd-90ab-0ce6271c55ec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f3464742-c248-409e-bc53-0a25497f2ddb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": []
        }
    ]
}");
        // BattleField_Player
        m_BattleField_Player = asset.FindActionMap("BattleField_Player", throwIfNotFound: true);
        m_BattleField_Player_Move = m_BattleField_Player.FindAction("Move", throwIfNotFound: true);
        m_BattleField_Player_Look = m_BattleField_Player.FindAction("Look", throwIfNotFound: true);
        // BattleField_Gun
        m_BattleField_Gun = asset.FindActionMap("BattleField_Gun", throwIfNotFound: true);
        m_BattleField_Gun_Shot = m_BattleField_Gun.FindAction("Shot", throwIfNotFound: true);
        m_BattleField_Gun_Aiming = m_BattleField_Gun.FindAction("Aiming", throwIfNotFound: true);
        m_BattleField_Gun_Reload = m_BattleField_Gun.FindAction("Reload", throwIfNotFound: true);
        // BattleField_Setting
        m_BattleField_Setting = asset.FindActionMap("BattleField_Setting", throwIfNotFound: true);
        m_BattleField_Setting_Pause = m_BattleField_Setting.FindAction("Pause", throwIfNotFound: true);
    }

    ~@PlayerInputAction()
    {
        UnityEngine.Debug.Assert(!m_BattleField_Player.enabled, "This will cause a leak and performance issues, PlayerInputAction.BattleField_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_BattleField_Gun.enabled, "This will cause a leak and performance issues, PlayerInputAction.BattleField_Gun.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_BattleField_Setting.enabled, "This will cause a leak and performance issues, PlayerInputAction.BattleField_Setting.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BattleField_Player
    private readonly InputActionMap m_BattleField_Player;
    private List<IBattleField_PlayerActions> m_BattleField_PlayerActionsCallbackInterfaces = new List<IBattleField_PlayerActions>();
    private readonly InputAction m_BattleField_Player_Move;
    private readonly InputAction m_BattleField_Player_Look;
    public struct BattleField_PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public BattleField_PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BattleField_Player_Move;
        public InputAction @Look => m_Wrapper.m_BattleField_Player_Look;
        public InputActionMap Get() { return m_Wrapper.m_BattleField_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleField_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IBattleField_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleField_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleField_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IBattleField_PlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IBattleField_PlayerActions instance)
        {
            if (m_Wrapper.m_BattleField_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleField_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleField_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleField_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleField_PlayerActions @BattleField_Player => new BattleField_PlayerActions(this);

    // BattleField_Gun
    private readonly InputActionMap m_BattleField_Gun;
    private List<IBattleField_GunActions> m_BattleField_GunActionsCallbackInterfaces = new List<IBattleField_GunActions>();
    private readonly InputAction m_BattleField_Gun_Shot;
    private readonly InputAction m_BattleField_Gun_Aiming;
    private readonly InputAction m_BattleField_Gun_Reload;
    public struct BattleField_GunActions
    {
        private @PlayerInputAction m_Wrapper;
        public BattleField_GunActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shot => m_Wrapper.m_BattleField_Gun_Shot;
        public InputAction @Aiming => m_Wrapper.m_BattleField_Gun_Aiming;
        public InputAction @Reload => m_Wrapper.m_BattleField_Gun_Reload;
        public InputActionMap Get() { return m_Wrapper.m_BattleField_Gun; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleField_GunActions set) { return set.Get(); }
        public void AddCallbacks(IBattleField_GunActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleField_GunActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleField_GunActionsCallbackInterfaces.Add(instance);
            @Shot.started += instance.OnShot;
            @Shot.performed += instance.OnShot;
            @Shot.canceled += instance.OnShot;
            @Aiming.started += instance.OnAiming;
            @Aiming.performed += instance.OnAiming;
            @Aiming.canceled += instance.OnAiming;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(IBattleField_GunActions instance)
        {
            @Shot.started -= instance.OnShot;
            @Shot.performed -= instance.OnShot;
            @Shot.canceled -= instance.OnShot;
            @Aiming.started -= instance.OnAiming;
            @Aiming.performed -= instance.OnAiming;
            @Aiming.canceled -= instance.OnAiming;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(IBattleField_GunActions instance)
        {
            if (m_Wrapper.m_BattleField_GunActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleField_GunActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleField_GunActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleField_GunActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleField_GunActions @BattleField_Gun => new BattleField_GunActions(this);

    // BattleField_Setting
    private readonly InputActionMap m_BattleField_Setting;
    private List<IBattleField_SettingActions> m_BattleField_SettingActionsCallbackInterfaces = new List<IBattleField_SettingActions>();
    private readonly InputAction m_BattleField_Setting_Pause;
    public struct BattleField_SettingActions
    {
        private @PlayerInputAction m_Wrapper;
        public BattleField_SettingActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_BattleField_Setting_Pause;
        public InputActionMap Get() { return m_Wrapper.m_BattleField_Setting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleField_SettingActions set) { return set.Get(); }
        public void AddCallbacks(IBattleField_SettingActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleField_SettingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleField_SettingActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IBattleField_SettingActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IBattleField_SettingActions instance)
        {
            if (m_Wrapper.m_BattleField_SettingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleField_SettingActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleField_SettingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleField_SettingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleField_SettingActions @BattleField_Setting => new BattleField_SettingActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IBattleField_PlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IBattleField_GunActions
    {
        void OnShot(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
    public interface IBattleField_SettingActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
